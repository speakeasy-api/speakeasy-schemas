// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: registry/embedaccesstoken/embedaccesstoken.proto

package embedaccesstoken

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmbedAccessTokenServiceClient is the client API for EmbedAccessTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbedAccessTokenServiceClient interface {
	//  Get is the rpc handling access token retrieval from the SDK
	Get(ctx context.Context, in *EmbedAccessTokenRequest, opts ...grpc.CallOption) (*EmbedAccessTokenResponse, error)
}

type embedAccessTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbedAccessTokenServiceClient(cc grpc.ClientConnInterface) EmbedAccessTokenServiceClient {
	return &embedAccessTokenServiceClient{cc}
}

func (c *embedAccessTokenServiceClient) Get(ctx context.Context, in *EmbedAccessTokenRequest, opts ...grpc.CallOption) (*EmbedAccessTokenResponse, error) {
	out := new(EmbedAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/embedaccesstoken.EmbedAccessTokenService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbedAccessTokenServiceServer is the server API for EmbedAccessTokenService service.
// All implementations must embed UnimplementedEmbedAccessTokenServiceServer
// for forward compatibility
type EmbedAccessTokenServiceServer interface {
	//  Get is the rpc handling access token retrieval from the SDK
	Get(context.Context, *EmbedAccessTokenRequest) (*EmbedAccessTokenResponse, error)
	mustEmbedUnimplementedEmbedAccessTokenServiceServer()
}

// UnimplementedEmbedAccessTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmbedAccessTokenServiceServer struct {
}

func (UnimplementedEmbedAccessTokenServiceServer) Get(context.Context, *EmbedAccessTokenRequest) (*EmbedAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEmbedAccessTokenServiceServer) mustEmbedUnimplementedEmbedAccessTokenServiceServer() {
}

// UnsafeEmbedAccessTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbedAccessTokenServiceServer will
// result in compilation errors.
type UnsafeEmbedAccessTokenServiceServer interface {
	mustEmbedUnimplementedEmbedAccessTokenServiceServer()
}

func RegisterEmbedAccessTokenServiceServer(s grpc.ServiceRegistrar, srv EmbedAccessTokenServiceServer) {
	s.RegisterService(&EmbedAccessTokenService_ServiceDesc, srv)
}

func _EmbedAccessTokenService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedAccessTokenServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/embedaccesstoken.EmbedAccessTokenService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedAccessTokenServiceServer).Get(ctx, req.(*EmbedAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbedAccessTokenService_ServiceDesc is the grpc.ServiceDesc for EmbedAccessTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbedAccessTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "embedaccesstoken.EmbedAccessTokenService",
	HandlerType: (*EmbedAccessTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EmbedAccessTokenService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/embedaccesstoken/embedaccesstoken.proto",
}
